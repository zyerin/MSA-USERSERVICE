on:
  pull_request:
    types:
      - closed
    branches:
      - main


jobs:
  MY-DEPLOY-JOB:
    if: github.event.pull_request.merged == true # 병합된 경우만 실행
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: "adopt"

      - name: Make application.properties
        run: |
          mkdir ./src/main/resources || true
          
          cd ./src/main/resources
          rm -rf ./application.yml || true
          echo "${{ secrets.APPLICATION_PROPERTIES }}" | base64 --decode  > ./application.yml

        shell: bash

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Docker build & push to docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{secrets.DOCKER_REPOSITORY}}:userservice .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:userservice

#      - name: Deploy to server
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          script_stop: true
#          script: |
#            echo ${{ secrets.DOCKER_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:userservice
#            cd /home/ubuntu/config
#            sudo docker-compose rm -fs user-service
#            sudo docker-compose up -d user-service
#            sudo docker image prune -f

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo ${{ secrets.DOCKER_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:userservice

#            Step 1: 첫 번째 인스턴스를 제외
            echo "Marking the first instance as DOWN"
            curl -X PATCH http://localhost:8081/actuator/down

#            Step 2: 첫 번째 인스턴스 업데이트
            echo "Updating the first instance..."
            docker-compose -f /home/ubuntu/docker-compose.yml rm -fs user-service-1
            docker-compose -f /home/ubuntu/docker-compose.yml up -d user-service-1
            echo "Marking the first instance as UP"
            curl -X PATCH http://localhost:8081/actuator/up

#            Step 3: 두 번째 인스턴스를 제외
            echo "Marking the second instance as DOWN"
            curl -X PATCH http://localhost:8082/actuator/down

#            Step 4: 두 번째 인스턴스 업데이트
            echo "Updating the second instance..."
            docker-compose -f /home/ubuntu/docker-compose.yml rm -fs user-service-2
            docker-compose -f /home/ubuntu/docker-compose.yml up -d user-service-2
            echo "Marking the second instance as UP"
            curl -X PATCH http://localhost:8082/actuator/up

#            Clean up unused images
            sudo docker image prune -f
